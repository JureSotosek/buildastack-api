type Query {
  suggestions(
    dependencies: [String!]
    devDependencies: [String!]
    limit: Int
  ): SuggestionsPayload!
  search(query: String!): [Package!]!
  stack(id: ID!): Stack
}

type SuggestionsPayload {
  suggestions: [Package!]!
  devSuggestions: [Package!]!
  allSuggestions: [Package!]!
}

type Package {
  name: String!
  version: String!
  description: String
  owner: Owner!
  humanDownloadsLast30Days: String!
  objectID: String!
  popular: Boolean!
}

type Owner {
  name: String!
}

type Mutation {
  createStack(dependencies: [InputDependency!]!): Stack!
}

input InputDependency {
  name: String!
  version: String!
  dev: Boolean!
}

type Stack {
  id: ID!
  dependencies: [Dependency!]!
}

type Dependency {
  name: String!
  version: String!
  dev: Boolean!
}
