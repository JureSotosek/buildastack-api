type Query {
  viewer: User!
  stack(id: ID!): StackPayload
  search(query: String!): [Package!]!
  suggestions(
    dependencies: [String!]
    devDependencies: [String!]
    limit: Int
  ): SuggestionsPayload!
}

type Mutation {
  authenticate(code: String!): AuthPayload!
  createStack(dependencies: [InputDependency!]!): Stack!
  saveStackNew(stack: InputStack!): Stack!
  saveStackFromId(stackId: ID!, name: String!): Stack!
  deleteStack(id: ID!): ID!
}

type User {
  id: ID!
  name: String!
  stacks: [Stack!]
}

type AuthPayload {
  token: String!
  user: User!
}

type StackPayload {
  stack: Stack!
  owner: Boolean!
}

type Stack {
  id: ID!
  name: String
  dependencies: [Dependency!]!
  user: User
}

input InputStack {
  name: String!
  dependencies: [InputDependency!]!
}

type Dependency {
  name: String!
  version: String!
  dev: Boolean!
}

input InputDependency {
  name: String!
  version: String!
  dev: Boolean!
}

type SuggestionsPayload {
  suggestions: [Package!]!
  devSuggestions: [Package!]!
  allSuggestions: [Package!]!
}

type Package {
  name: String!
  version: String!
  description: String
  owner: Owner!
  humanDownloadsLast30Days: String!
  objectID: String!
  popular: Boolean!
}

type Owner {
  name: String!
}
