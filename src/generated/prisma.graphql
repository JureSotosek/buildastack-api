# source: https://buildastack-5e801ac025.herokuapp.com/buildastack-api/prod
# timestamp: Fri Oct 18 2019 16:14:45 GMT+0100 (British Summer Time)

type AggregateDependency {
  count: Int!
}

type AggregateStack {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Dependency implements Node {
  id: ID!
  name: String!
  version: String!
  dev: Boolean!
}

"""A connection to a list of items."""
type DependencyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DependencyEdge]!
  aggregate: AggregateDependency!
}

input DependencyCreateInput {
  id: ID
  name: String!
  version: String!
  dev: Boolean!
}

input DependencyCreateManyInput {
  create: [DependencyCreateInput!]
  connect: [DependencyWhereUniqueInput!]
}

"""An edge in a connection."""
type DependencyEdge {
  """The item at the end of the edge."""
  node: Dependency!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DependencyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  version_ASC
  version_DESC
  dev_ASC
  dev_DESC
}

type DependencyPreviousValues {
  id: ID!
  name: String!
  version: String!
  dev: Boolean!
}

input DependencyScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DependencyScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DependencyScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DependencyScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  version: String

  """All values that are not equal to given value."""
  version_not: String

  """All values that are contained in given list."""
  version_in: [String!]

  """All values that are not contained in given list."""
  version_not_in: [String!]

  """All values less than the given value."""
  version_lt: String

  """All values less than or equal the given value."""
  version_lte: String

  """All values greater than the given value."""
  version_gt: String

  """All values greater than or equal the given value."""
  version_gte: String

  """All values containing the given string."""
  version_contains: String

  """All values not containing the given string."""
  version_not_contains: String

  """All values starting with the given string."""
  version_starts_with: String

  """All values not starting with the given string."""
  version_not_starts_with: String

  """All values ending with the given string."""
  version_ends_with: String

  """All values not ending with the given string."""
  version_not_ends_with: String
  dev: Boolean

  """All values that are not equal to given value."""
  dev_not: Boolean
}

type DependencySubscriptionPayload {
  mutation: MutationType!
  node: Dependency
  updatedFields: [String!]
  previousValues: DependencyPreviousValues
}

input DependencySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DependencySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DependencySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DependencySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DependencyWhereInput
}

input DependencyUpdateDataInput {
  name: String
  version: String
  dev: Boolean
}

input DependencyUpdateInput {
  name: String
  version: String
  dev: Boolean
}

input DependencyUpdateManyDataInput {
  name: String
  version: String
  dev: Boolean
}

input DependencyUpdateManyInput {
  create: [DependencyCreateInput!]
  connect: [DependencyWhereUniqueInput!]
  set: [DependencyWhereUniqueInput!]
  disconnect: [DependencyWhereUniqueInput!]
  delete: [DependencyWhereUniqueInput!]
  update: [DependencyUpdateWithWhereUniqueNestedInput!]
  updateMany: [DependencyUpdateManyWithWhereNestedInput!]
  deleteMany: [DependencyScalarWhereInput!]
  upsert: [DependencyUpsertWithWhereUniqueNestedInput!]
}

input DependencyUpdateManyMutationInput {
  name: String
  version: String
  dev: Boolean
}

input DependencyUpdateManyWithWhereNestedInput {
  where: DependencyScalarWhereInput!
  data: DependencyUpdateManyDataInput!
}

input DependencyUpdateWithWhereUniqueNestedInput {
  where: DependencyWhereUniqueInput!
  data: DependencyUpdateDataInput!
}

input DependencyUpsertWithWhereUniqueNestedInput {
  where: DependencyWhereUniqueInput!
  update: DependencyUpdateDataInput!
  create: DependencyCreateInput!
}

input DependencyWhereInput {
  """Logical AND on all given filters."""
  AND: [DependencyWhereInput!]

  """Logical OR on all given filters."""
  OR: [DependencyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DependencyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  version: String

  """All values that are not equal to given value."""
  version_not: String

  """All values that are contained in given list."""
  version_in: [String!]

  """All values that are not contained in given list."""
  version_not_in: [String!]

  """All values less than the given value."""
  version_lt: String

  """All values less than or equal the given value."""
  version_lte: String

  """All values greater than the given value."""
  version_gt: String

  """All values greater than or equal the given value."""
  version_gte: String

  """All values containing the given string."""
  version_contains: String

  """All values not containing the given string."""
  version_not_contains: String

  """All values starting with the given string."""
  version_starts_with: String

  """All values not starting with the given string."""
  version_not_starts_with: String

  """All values ending with the given string."""
  version_ends_with: String

  """All values not ending with the given string."""
  version_not_ends_with: String
  dev: Boolean

  """All values that are not equal to given value."""
  dev_not: Boolean
}

input DependencyWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createStack(data: StackCreateInput!): Stack!
  createDependency(data: DependencyCreateInput!): Dependency!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateStack(data: StackUpdateInput!, where: StackWhereUniqueInput!): Stack
  updateDependency(data: DependencyUpdateInput!, where: DependencyWhereUniqueInput!): Dependency
  deleteUser(where: UserWhereUniqueInput!): User
  deleteStack(where: StackWhereUniqueInput!): Stack
  deleteDependency(where: DependencyWhereUniqueInput!): Dependency
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertStack(where: StackWhereUniqueInput!, create: StackCreateInput!, update: StackUpdateInput!): Stack!
  upsertDependency(where: DependencyWhereUniqueInput!, create: DependencyCreateInput!, update: DependencyUpdateInput!): Dependency!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyStacks(data: StackUpdateManyMutationInput!, where: StackWhereInput): BatchPayload!
  updateManyDependencies(data: DependencyUpdateManyMutationInput!, where: DependencyWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyStacks(where: StackWhereInput): BatchPayload!
  deleteManyDependencies(where: DependencyWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  stacks(where: StackWhereInput, orderBy: StackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stack]!
  dependencies(where: DependencyWhereInput, orderBy: DependencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dependency]!
  user(where: UserWhereUniqueInput!): User
  stack(where: StackWhereUniqueInput!): Stack
  dependency(where: DependencyWhereUniqueInput!): Dependency
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  stacksConnection(where: StackWhereInput, orderBy: StackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StackConnection!
  dependenciesConnection(where: DependencyWhereInput, orderBy: DependencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DependencyConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Stack implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  dependencies(where: DependencyWhereInput, orderBy: DependencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dependency!]
  user: User
  template: Boolean
  color: String
}

"""A connection to a list of items."""
type StackConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StackEdge]!
  aggregate: AggregateStack!
}

input StackCreateInput {
  id: ID
  name: String
  template: Boolean
  color: String
  dependencies: DependencyCreateManyInput
  user: UserCreateOneWithoutStacksInput
}

input StackCreateManyWithoutUserInput {
  create: [StackCreateWithoutUserInput!]
  connect: [StackWhereUniqueInput!]
}

input StackCreateWithoutUserInput {
  id: ID
  name: String
  template: Boolean
  color: String
  dependencies: DependencyCreateManyInput
}

"""An edge in a connection."""
type StackEdge {
  """The item at the end of the edge."""
  node: Stack!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StackOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  template_ASC
  template_DESC
  color_ASC
  color_DESC
}

type StackPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  template: Boolean
  color: String
}

input StackScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StackScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StackScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StackScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  template: Boolean

  """All values that are not equal to given value."""
  template_not: Boolean
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
}

type StackSubscriptionPayload {
  mutation: MutationType!
  node: Stack
  updatedFields: [String!]
  previousValues: StackPreviousValues
}

input StackSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StackSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StackSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StackSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StackWhereInput
}

input StackUpdateInput {
  name: String
  template: Boolean
  color: String
  dependencies: DependencyUpdateManyInput
  user: UserUpdateOneWithoutStacksInput
}

input StackUpdateManyDataInput {
  name: String
  template: Boolean
  color: String
}

input StackUpdateManyMutationInput {
  name: String
  template: Boolean
  color: String
}

input StackUpdateManyWithoutUserInput {
  create: [StackCreateWithoutUserInput!]
  connect: [StackWhereUniqueInput!]
  set: [StackWhereUniqueInput!]
  disconnect: [StackWhereUniqueInput!]
  delete: [StackWhereUniqueInput!]
  update: [StackUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [StackUpdateManyWithWhereNestedInput!]
  deleteMany: [StackScalarWhereInput!]
  upsert: [StackUpsertWithWhereUniqueWithoutUserInput!]
}

input StackUpdateManyWithWhereNestedInput {
  where: StackScalarWhereInput!
  data: StackUpdateManyDataInput!
}

input StackUpdateWithoutUserDataInput {
  name: String
  template: Boolean
  color: String
  dependencies: DependencyUpdateManyInput
}

input StackUpdateWithWhereUniqueWithoutUserInput {
  where: StackWhereUniqueInput!
  data: StackUpdateWithoutUserDataInput!
}

input StackUpsertWithWhereUniqueWithoutUserInput {
  where: StackWhereUniqueInput!
  update: StackUpdateWithoutUserDataInput!
  create: StackCreateWithoutUserInput!
}

input StackWhereInput {
  """Logical AND on all given filters."""
  AND: [StackWhereInput!]

  """Logical OR on all given filters."""
  OR: [StackWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StackWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  template: Boolean

  """All values that are not equal to given value."""
  template_not: Boolean
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  dependencies_every: DependencyWhereInput
  dependencies_some: DependencyWhereInput
  dependencies_none: DependencyWhereInput
  user: UserWhereInput
}

input StackWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  stack(where: StackSubscriptionWhereInput): StackSubscriptionPayload
  dependency(where: DependencySubscriptionWhereInput): DependencySubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  githubId: String!
  name: String!
  stacks(where: StackWhereInput, orderBy: StackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stack!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  githubId: String!
  name: String!
  stacks: StackCreateManyWithoutUserInput
}

input UserCreateOneWithoutStacksInput {
  create: UserCreateWithoutStacksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStacksInput {
  id: ID
  githubId: String!
  name: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  githubId_ASC
  githubId_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  githubId: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  githubId: String
  name: String
  stacks: StackUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  githubId: String
  name: String
}

input UserUpdateOneWithoutStacksInput {
  create: UserCreateWithoutStacksInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutStacksDataInput
  upsert: UserUpsertWithoutStacksInput
}

input UserUpdateWithoutStacksDataInput {
  githubId: String
  name: String
}

input UserUpsertWithoutStacksInput {
  update: UserUpdateWithoutStacksDataInput!
  create: UserCreateWithoutStacksInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  githubId: String

  """All values that are not equal to given value."""
  githubId_not: String

  """All values that are contained in given list."""
  githubId_in: [String!]

  """All values that are not contained in given list."""
  githubId_not_in: [String!]

  """All values less than the given value."""
  githubId_lt: String

  """All values less than or equal the given value."""
  githubId_lte: String

  """All values greater than the given value."""
  githubId_gt: String

  """All values greater than or equal the given value."""
  githubId_gte: String

  """All values containing the given string."""
  githubId_contains: String

  """All values not containing the given string."""
  githubId_not_contains: String

  """All values starting with the given string."""
  githubId_starts_with: String

  """All values not starting with the given string."""
  githubId_not_starts_with: String

  """All values ending with the given string."""
  githubId_ends_with: String

  """All values not ending with the given string."""
  githubId_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  stacks_every: StackWhereInput
  stacks_some: StackWhereInput
  stacks_none: StackWhereInput
}

input UserWhereUniqueInput {
  id: ID
  githubId: String
}
