# source: https://buildastack-prisma.herokuapp.com/buildastack/dev
# timestamp: Sun Aug 26 2018 22:29:13 GMT+0200 (Central European Summer Time)

type AggregateDependency {
  count: Int!
}

type AggregateStack {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Dependency {
  name: String!
  version: String!
  dev: Boolean!
}

"""A connection to a list of items."""
type DependencyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DependencyEdge]!
  aggregate: AggregateDependency!
}

input DependencyCreateInput {
  name: String!
  version: String!
  dev: Boolean!
}

input DependencyCreateManyInput {
  create: [DependencyCreateInput!]
}

"""An edge in a connection."""
type DependencyEdge {
  """The item at the end of the edge."""
  node: Dependency!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DependencyOrderByInput {
  name_ASC
  name_DESC
  version_ASC
  version_DESC
  dev_ASC
  dev_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DependencyPreviousValues {
  name: String!
  version: String!
  dev: Boolean!
}

type DependencySubscriptionPayload {
  mutation: MutationType!
  node: Dependency
  updatedFields: [String!]
  previousValues: DependencyPreviousValues
}

input DependencySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DependencySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DependencySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DependencySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DependencyWhereInput
}

input DependencyUpdateInput {
  name: String
  version: String
  dev: Boolean
}

input DependencyUpdateManyInput {
  create: [DependencyCreateInput!]
}

input DependencyWhereInput {
  """Logical AND on all given filters."""
  AND: [DependencyWhereInput!]

  """Logical OR on all given filters."""
  OR: [DependencyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DependencyWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  version: String

  """All values that are not equal to given value."""
  version_not: String

  """All values that are contained in given list."""
  version_in: [String!]

  """All values that are not contained in given list."""
  version_not_in: [String!]

  """All values less than the given value."""
  version_lt: String

  """All values less than or equal the given value."""
  version_lte: String

  """All values greater than the given value."""
  version_gt: String

  """All values greater than or equal the given value."""
  version_gte: String

  """All values containing the given string."""
  version_contains: String

  """All values not containing the given string."""
  version_not_contains: String

  """All values starting with the given string."""
  version_starts_with: String

  """All values not starting with the given string."""
  version_not_starts_with: String

  """All values ending with the given string."""
  version_ends_with: String

  """All values not ending with the given string."""
  version_not_ends_with: String
  dev: Boolean

  """All values that are not equal to given value."""
  dev_not: Boolean
  _MagicalBackRelation_Dependencies_every: StackWhereInput
  _MagicalBackRelation_Dependencies_some: StackWhereInput
  _MagicalBackRelation_Dependencies_none: StackWhereInput
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createStack(data: StackCreateInput!): Stack!
  createDependency(data: DependencyCreateInput!): Dependency!
  updateStack(data: StackUpdateInput!, where: StackWhereUniqueInput!): Stack
  deleteStack(where: StackWhereUniqueInput!): Stack
  upsertStack(where: StackWhereUniqueInput!, create: StackCreateInput!, update: StackUpdateInput!): Stack!
  updateManyStacks(data: StackUpdateInput!, where: StackWhereInput): BatchPayload!
  updateManyDependencies(data: DependencyUpdateInput!, where: DependencyWhereInput): BatchPayload!
  deleteManyStacks(where: StackWhereInput): BatchPayload!
  deleteManyDependencies(where: DependencyWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  stacks(where: StackWhereInput, orderBy: StackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stack]!
  dependencies(where: DependencyWhereInput, orderBy: DependencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dependency]!
  stack(where: StackWhereUniqueInput!): Stack
  stacksConnection(where: StackWhereInput, orderBy: StackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StackConnection!
  dependenciesConnection(where: DependencyWhereInput, orderBy: DependencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DependencyConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Stack implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  dependencies(where: DependencyWhereInput, orderBy: DependencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dependency!]
}

"""A connection to a list of items."""
type StackConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StackEdge]!
  aggregate: AggregateStack!
}

input StackCreateInput {
  dependencies: DependencyCreateManyInput
}

"""An edge in a connection."""
type StackEdge {
  """The item at the end of the edge."""
  node: Stack!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StackOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StackPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StackSubscriptionPayload {
  mutation: MutationType!
  node: Stack
  updatedFields: [String!]
  previousValues: StackPreviousValues
}

input StackSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StackSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StackSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StackSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StackWhereInput
}

input StackUpdateInput {
  dependencies: DependencyUpdateManyInput
}

input StackWhereInput {
  """Logical AND on all given filters."""
  AND: [StackWhereInput!]

  """Logical OR on all given filters."""
  OR: [StackWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StackWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  dependencies_every: DependencyWhereInput
  dependencies_some: DependencyWhereInput
  dependencies_none: DependencyWhereInput
}

input StackWhereUniqueInput {
  id: ID
}

type Subscription {
  stack(where: StackSubscriptionWhereInput): StackSubscriptionPayload
  dependency(where: DependencySubscriptionWhereInput): DependencySubscriptionPayload
}
